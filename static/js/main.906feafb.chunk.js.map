{"version":3,"sources":["Const/logoDimensions.js","Const/index.js","Atlantide/ColumnMaker.js","Atlantide/GridMaker.js","cache.svg","Atlantide/SvgRender/Use.js","Atlantide/SvgRender/RVG.js","Patterns/PixelGrid/PixelGrid.js","Filters/Light.js","Atom/Atom.js","Atom/Button.js","index.js"],"names":["magicRatio","value","Math","round","tan","PI","logoWidth","logoHeight","spacing","stroke","realLogoHeight","phi","sqrt","quasiPeriodBehaviour","n","floor","periodBehaviour","ColumnMaker","props","Const","oldStyle","children","style","Array","from","atoms","e","i","Child","updatedProps","React","cloneElement","scaleX","scaleY","xStart","x","yStart","y","componentWidth","type","width","componentHeight","height","evenOddVerticalFlip","flow","phase","quasiPeriodicHorizontalFlip","mirrorVer","mirrorHor","newStyle","GridMaker","vertical","set","horizontal","hSpacing","vSpacing","ColumnProps","classes","push","chaotic","key","Use","id","cached","href","Cache","RVG","Component","count","component","Css","css","useShadow","name","undefined","shadowComponent","first","instance","isFirstInstance","result","console","log","Object","defineProperty","PixelGrid","patternSettings","withCouples","preserveAspectRatio","viewBox","Light","s","h","Atom","relPoints","d","Button","r","cx","cy","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.906feafb.chunk.js","sourcesContent":["//brand costants\nexport function magicRatio(value) {\n    // diviso 2 per ottenere metà base tirangolo * tan(54°)\n    return Math.round(value/2*Math.tan(54*Math.PI/180))\n}\n//logo dimensions\nexport const logoWidth = 10000\nexport const logoHeight = magicRatio(logoWidth)\nexport const spacing = logoWidth/10\nexport const stroke = spacing/10*2\nexport const realLogoWidth = logoWidth + stroke/2\nexport const realLogoHeight = logoHeight + stroke/2\n","export const phi = (1 + Math.sqrt(5)) / 2\nexport const depth = 10\nexport const lightIntensity = 'white'\nexport function quasiPeriodBehaviour(n) {\n    return (2-(Math.floor((n+2)* phi)-Math.floor((n+1)*phi)))\n  }\nexport function periodBehaviour(n) {\n  return (n%2!==0)\n}\nexport * from \"./logoDimensions\";","import React, { useState } from 'react';\nimport * as Const from '../Const'\n\nfunction ColumnMaker(props) {\n  \n  let spacing = (props.spacing || 0) * Const.spacing //this maybe should be Component.spacing?\n  let oldStyle = props.children.props.style || {}\n  return Array.from(Array(props.atoms || 1), (e, i) => { //for every atom calculate its postion and mirroring\n\n      //child refernce but we can update its props\n      let Child = (updatedProps) =>  React.cloneElement(props.children, updatedProps)\n\n      //some datas\n      let scaleX = 1, scaleY = 1\n      let xStart = props.x || 0, yStart = props.y || 0 //if not set start drawing at (0;0)\n      let componentWidth = props.children.type.width, componentHeight = props.children.type.height\n\n      if (props.evenOddVerticalFlip && props.flow === \"horizontal\")\n        componentWidth = componentWidth/2 //if atoms are horizontal in evenodd vertical flip mode they must be spaced half\n\n      //logic of repetition\n      if(Const.periodBehaviour(i)) { //EVENODD PERIODIC BEHAVIOUR\n          if (props.evenOddVerticalFlip) \n              scaleY = -1 //FLIP VERTICAL\n\n          if (props.phase === 'periodic') \n              xStart -= (componentWidth+spacing)/2  //Move even atoms a bit to the left\n      }\n\n      if(Const.quasiPeriodBehaviour(i)) { //QUASIPERIODIC BEHAVIOUR\n            if (props.quasiPeriodicHorizontalFlip) \n              scaleX = -1   //FLIP HORIZONTAL\n            if (props.phase === 'quasiperiodic')\n            xStart -= (componentWidth+spacing)/2\n       }\n       //if there's some mirroring happening in this column we invert the scale factors\n          scaleY = props.mirrorVer ? -scaleY : scaleY\n          scaleX =  props.mirrorHor ? -scaleX : scaleX\n          yStart += (componentHeight + spacing) * i\n        \n          let newStyle = {...(scaleX === -1 | scaleY === -1) && {\n            '--t': `scale(${scaleX},${scaleY})`\n          }}\n          \n          //Atom at position i get printed\n          return <Child y={yStart} x={xStart} style={{...oldStyle, ...newStyle}} key={i}/>\n        })\n}\nexport default ColumnMaker\n\n\n/*\nBUG : QUANDO SALVI QUESTO FILE LA PRIMA ISTANZA DI UN COMPONENETE NON SI COMPORTA COME DOVREBBE\nPOTREBBE ESSERE PERCHE USIAMO UN CLONE ANZICHE L'ISTANZA STESSA\n\n*/","import React from 'react';\nimport * as Const from '../Const'\nimport ColumnMaker from './ColumnMaker'\nfunction GridMaker(props) {\n  let vertical = props.set.vertical, horizontal = props.set.horizontal,\n  hSpacing = horizontal.spacing * Const.spacing, maxX,\n  vSpacing = vertical.spacing * Const.spacing, maxY\n\n  //Grid viewBox calcs\n  if (horizontal.evenOddVerticalFlip)\n    maxX = Const.logoWidth * horizontal.atoms + hSpacing * (horizontal.atoms - 1) - Const.logoWidth/2 * (horizontal.atoms - 1)\n  else\n    maxX = Const.logoWidth * horizontal.atoms + hSpacing * (horizontal.atoms - 1)\n  maxY = Const.logoHeight * vertical.atoms + vSpacing * (vertical.atoms -1)\n        \n  return Array.from(Array(horizontal.atoms), (e, i) => { let classes = [], mirrorHor, mirrorVer, ColumnProps, phase,x\n\n      //EVENODD PERIODIC BEHAVIOUR\n      if(Const.periodBehaviour(i)) {\n        classes.push('frequentColumn')\n\n        //FLIP VERTICAL\n        if (horizontal.evenOddVerticalFlip)\n          mirrorVer = true\n        //PHASING\n        if (horizontal.phase === 'periodic')\n          phase = {y: (Const.logoHeight+vSpacing)/2}\n      }\n\n      //QUASIPERIODIC BEHAVIOUR\n      if(Const.quasiPeriodBehaviour(i)) {\n        classes.push('quasirareColumn')\n\n        //FLIP HORIZONTAL\n        if (horizontal.quasiPeriodicHorizontalFlip)\n          mirrorHor = true\n        //PHASING\n        if (horizontal.phase === 'quasiperiodic')\n          phase = {y: (Const.logoHeight+vSpacing)/2}\n      }\n\n      //rare behaviour [quasiperiod and evenodd period matching]\n      if(Const.quasiPeriodBehaviour(i) && Const.periodBehaviour(i)) {\n        classes.push('rareColumn')\n      }\n\n      //constant behaviour [for the whole Column]\n      if (!props.set.chaotic)\n        ColumnProps = {mirrorVer: mirrorVer, mirrorHor: mirrorHor}\n      else\n        ColumnProps = {mirrorHor: mirrorVer, mirrorVer: mirrorHor}\n      //Column at position i get printed\n      if (horizontal.evenOddVerticalFlip)\n        x = (Const.logoWidth/2 + hSpacing) * i\n      else \n        x = (Const.logoWidth + hSpacing) * i\n      return(<ColumnMaker {...phase} x={x} {...vertical} {...ColumnProps} key={i} //classes={classes.join(' ')}\n              >{props.children}</ColumnMaker>)\n    })\n}\nexport default GridMaker","export default __webpack_public_path__ + \"static/media/cache.9f6afcf7.svg\";","import React from 'react';\nimport Cache from '../../cache.svg'\nfunction Use({id, cached, x, y, ...props}) {\n    return <use href={`${cached ? Cache : ''}#${id}`} x={x} y={y} {...props} />\n}\nexport default Use","import React, {useEffect, useState} from 'react';\nimport Use from './Use'\n\nfunction RVG(Component) {\n    Component.count = 0\n    let component = function(...props) {\n        //load css of the child (we might need that later)\n        let Css = () => Component.css ? <style>{Component.css}</style> : ''\n\n        //load child with an identifier and props OR load use referincing to that id with props\n        let component = <Component id={Component.useShadow ? Component.name : undefined} {...!Component.useShadow && props[0]} />\n        let shadowComponent = <Use id={Component.name} {...props[0]} />\n\n        //if using shadow dom we hide the first component cause its used for reference\n        let first = Component.useShadow ? <><defs><Css />{component}</defs>{shadowComponent}</> : <><Css />{component}</>\n        let instance = Component.useShadow ? shadowComponent : component\n\n        let isFirstInstance = Component.count===1\n        Component.count++\n        \n        let result = isFirstInstance ? first : instance\n        return result\n    }\n    console.log(<Component />)\n    component.width = Component.width\n    component.height = Component.height\n\n    Object.defineProperty(component, \"name\", { value: Component.name })\n\n    return component\n           \n}\nexport default RVG","import React from 'react';\nimport GridMaker from '../../Atlantide/GridMaker';\nimport RVG from '../../Atlantide/SvgRender/RVG';\nimport * as Const from '../../Const'\nfunction PixelGrid(props)  {\n    let patternSettings = {\n        id: \"PixelGrid\",\n        horizontal: {\n          spacing: props.spacing || 0, //props.spacing\n          atoms: props.width || 1, //props.atoms\n          quasiPeriodicHorizontalFlip: true,\n          evenOddVerticalFlip: true,\n          phase: false\n        },\n        vertical: {\n          spacing: props.spacing || 0, //props.spacing\n          atoms: props.height || 1, //props.atoms\n          quasiPeriodicHorizontalFlip: true,\n          evenOddVerticalFlip: true,\n          phase: false\n        },\n        withCouples: false,\n        chaotic: false\n      }\n      console.log(props.children.type.height)\n      return <svg preserveAspectRatio=\"xMidYMid slice\" viewBox={`0 0 ${props.children.type.width *props.width} ${props.children.type.height*props.height}`} >\n        <GridMaker set={patternSettings} {...props} >{props.children}</GridMaker>\n        </svg>\n}\n//problema da risolvere (come sappiamo quanti atomi ci saranno dentro? queste proprietà devono essere dinamiche)\nPixelGrid.width = (Const.logoWidth/2 + Const.stroke/2) * 59 \nPixelGrid.height = Const.realLogoHeight*20\nexport default RVG(PixelGrid)\n  ","import React from 'react';\nimport * as Const from '../Const'\nfunction Light(props)  {\n    return(\n        <filter id={props.name} filterUnits=\"userSpaceOnUse\">\n                {/* <feDiffuseLighting lightingColor={Const.lightIntensity} diffuseConstant={1} in=\"SourceAlpha\" >\n                    <fePointLight x={50} y={50} z={Const.depth} />\n                </feDiffuseLighting> */}\n        </filter>\n    )\n}\nexport default Light;","import React, {useState} from 'react';\nimport RVG from '../Atlantide/SvgRender/RVG'\nimport * as Const from '../Const'\n\nconst s = Const.spacing, h = Const.logoHeight\n\nfunction Atom({x, y, ...props}) {\n        let relPoints = `m${s*3 + (x || 0)} ${h - Const.magicRatio(s*2) + (y || 0)}l${s} ${h-Const.magicRatio(s*8)}h${s*2}l-${s*2} -${h-Const.magicRatio(s*6)}l${s} -${h-Const.magicRatio(s*8)}l${s*3} ${h-Const.magicRatio(s*4)}h${s*2}l-${s*5} -${h}l-${s*5} ${h}h${s*2}z` \n        return <path d={relPoints} {...props} />\n        //id should be added even if not explicit here\n}\nAtom.css = `path {\n    transform-box: fill-box;\n    transform-origin: center;\n    transform: var(--t);\n    stroke: var(--c, white);\n    stroke-width: ${Const.stroke};\n    fill: none;`\nAtom.width = Const.realLogoWidth\nAtom.height = Const.realLogoHeight\nAtom.useShadow = true\n\nexport default RVG(Atom)","import React from 'react';\nimport RVG from '../Atlantide/SvgRender/RVG'\n\n\nfunction Button({x, y, ...props}) {\n        return <circle r={500} cx={x} cy={y} {...props} />\n}\nButton.css = `circle {fill: red;}`\n\n\nButton.width = 1000\nButton.height = 1000\nButton.useShadow = false\n\nexport default RVG(Button)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PixelGrid from './Patterns/PixelGrid/PixelGrid'\nimport Light from './Filters/Light';\nimport * as Const from './Const'\nimport Atom from './Atom/Atom'\nimport Image from './Atlantide/SvgRender/PrintSVG'\nimport Button from './Atom/Button';\n\nfunction App() {\n  //app size based on window size data?\n  const appHeight = 20\n  const appWidth = 80\n    return (<svg height=\"100%\" width=\"100%\">\n              <rect width=\"100%\" height=\"100%\" />\n              <PixelGrid spacing={3} height={appHeight} width={appWidth}>\n                    <Atom style={{'--c': 'var(--blue)' }}/>\n                  </PixelGrid>\n            </svg>)\n    return (\n    //for the sake of comodity, the svg of the interface is going to be (0 0 100 100)\n      <>\n      <Light name=\"backLight\" />\n        <svg onMouseMove={moveLight} viewBox=\"0 0 100 100\" width=\"100%\" height=\"100%\" className=\"svgViewer\">\n        <rect style={{filter: \"url(#BaseRelief)\"}} width={100} height={100} />\n        </svg>\n      </>\n    )\n}\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nlet moveLight = event => {\n  var x = event.clientX /window.innerWidth*100;\n    var y = event.clientY/window.innerHeight*100;\n    document.querySelectorAll(\"fePointLight\").forEach(function(light) {\n    light.setAttribute(\"y\", y)\n    light.setAttribute(\"x\", x)\n})}"],"sourceRoot":""}